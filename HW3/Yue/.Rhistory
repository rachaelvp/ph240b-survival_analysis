return(CI_count/ 1000)
}
CI_count <- 0
CI_coverage_bonus(1000, 5)
CI_coverage_bonus(1000, 5)
N <- 1000
num_W = 5
W = list()
for(j in 1:num_W) {
W[[j]] = rnorm(1000)
}
sum_W = 0
for(j in 1:num_W) {
sum_W = sum_W + W[[j]]
}
A = rbinom(1000, 1, 0.5)
C = abs(sum_W + 20 * A)
T = abs(sum_W)
S = Surv(time = pmin(T, C), event = (C >= T & T <= 1), type = "right")
# because T is not dependent on A, the true coefficient for A is
truth = exp(0)
# they run a Cox Proportional Hazards regression
# with treatment as the only covariate
coxfit = coxph(S ~ A, data = data.frame(A))
summary(coxfit)$conf.int
summary(coxfit)$conf.int[, 3][1]
upper <- summary(coxfit)$conf.int[, 4]
upper
as.numeric(truth >= lower && truth <= upper)
lower <- summary(coxfit)$conf.int[, 3]
as.numeric(truth >= lower && truth <= upper)
C = abs(sum_W + 10 * A)
T = abs(sum_W)
S = Surv(time = pmin(T, C), event = (C >= T & T <= 1), type = "right")
# because T is not dependent on A, the true coefficient for A is
truth = exp(0)
# they run a Cox Proportional Hazards regression
# with treatment as the only covariate
coxfit = coxph(S ~ A, data = data.frame(A))
# did they cover the truth in their misspecified model?
lower <- summary(coxfit)$conf.int[, 3]
upper <- summary(coxfit)$conf.int[, 4]
as.numeric(truth >= lower && truth <= upper)
A = rbinom(1000, 1, 0.3)
# we make C and T dependent on covariates and we also
# make C dependent on A,
# such that drop out is effected by treatment
C = abs(sum_W + 10 * A)
T = abs(sum_W)
S = Surv(time = pmin(T, C), event = (C >= T & T <= 1), type = "right")
# because T is not dependent on A, the true coefficient for A is
truth = exp(0)
# they run a Cox Proportional Hazards regression
# with treatment as the only covariate
coxfit = coxph(S ~ A, data = data.frame(A))
# did they cover the truth in their misspecified model?
lower <- summary(coxfit)$conf.int[, 3]
upper <- summary(coxfit)$conf.int[, 4]
as.numeric(truth >= lower && truth <= upper)
lower
upper
coxfit = coxph(S ~ ., data = data.frame(A))
C = abs(sum_W + A)
T = abs(sum_W)
S = Surv(time = pmin(T, C), event = (C >= T & T <= 1), type = "right")
# because T is not dependent on A, the true coefficient for A is
truth = exp(0)
# they run a Cox Proportional Hazards regression
# with treatment as the only covariate
coxfit = coxph(S ~ ., data = data.frame(A))
lower <- summary(coxfit)$conf.int[, 3]
upper <- summary(coxfit)$conf.int[, 4]
as.numeric(truth >= lower && truth <= upper)
summary(coxfit)$conf.int[, 3]
summary(coxfit)$conf.int[, 4]
C = abs(sum_W + 100 * A)
T = abs(sum_W)
S = Surv(time = pmin(T, C), event = (C >= T & T <= 1), type = "right")
# because T is not dependent on A, the true coefficient for A is
truth = exp(0)
# they run a Cox Proportional Hazards regression
# with treatment as the only covariate
coxfit = coxph(S ~ ., data = data.frame(A))
# did they cover the truth in their misspecified model?
summary(coxfit)$conf.int[, 3]
summary(coxfit)$conf.int[, 4]
A[A == 0]
A[A == 0] <- -1
A
CI_coverage <- function(n) {
for(i in 1:n) {
# draw the W from standard normals
W1 = rnorm(n)
W2 = rnorm(n)
A = rbinom(n, 1, plogis(0.1 + W1 * W2))
A[A == 0] <- -1
# draw T and C --both generated with random uniforms as perviously described but C could
# be generated anyway independent of T given W for identifiability purposes
C = -log(runif(n))/(0.01 * exp(0.3 * W1))
T =  -log(runif(n))/(0.02 * exp(2 * W1 ** 2 - A))
# Create the survival objec
S = Surv(time = pmin(T, C), event = (C >= T & T <= 100), type = "right")
data = data.frame(A = A, W1 = W1, W2 = W2)
coxfit = coxph(S ~ ., data = data)
# true value
truth <- exp(-1)
# 95% CI for A
lower <- summary(coxfit)$conf.int[, 3][1]
upper <- summary(coxfit)$conf.int[, 4][1]
CI_count <- CI_count +  as.numeric(truth >= lower && truth <= upper)
}
return(CI_count/ 1000)
}
CI_count <- 0
rm(list=ls())
N <- 1000
num_W = 5
CI_coverage_bonus <- function(N, num_W) {
for(i in 1:N){
# simulation
W = list()
for(j in 1:num_W) {
W[[j]] = rnorm(1000)
}
sum_W = 0
for(j in 1:num_W) {
sum_W = sum_W + W[[j]]
}
A = rbinom(1000, 1, 0.5)
A[A == 0] <- -1
# we make C and T dependent on covariates and we also
# make C dependent on A,
# such that drop out is effected by treatment
C = abs(sum_W + 100 * A)
T = abs(sum_W)
S = Surv(time = pmin(T, C), event = (C >= T & T <= 1), type = "right")
# because T is not dependent on A, the true coefficient for A is
truth = exp(0)
# they run a Cox Proportional Hazards regression
# with treatment as the only covariate
coxfit = coxph(S ~ ., data = data.frame(A))
# did they cover the truth in their misspecified model?
lower <- summary(coxfit)$conf.int[, 3]
upper <- summary(coxfit)$conf.int[, 4]
CI_count <- CI_count +  as.numeric(truth >= lower && truth <= upper)
}
# calculating the coverage
return(CI_count/ 1000)
}
CI_count <- 0
CI_coverage_bonus(1000, 5)
CI_coverage_bonus(1000, 1)
CI_coverage_bonus <- function(N, num_W) {
for(i in 1:N){
# simulation
W = list()
for(j in 1:num_W) {
W[[j]] = rnorm(1000)
}
sum_W = 0
for(j in 1:num_W) {
sum_W = sum_W + W[[j]]
}
A = rbinom(1000, 1, 0.5)
A[A == 0] <- -1
# we make C and T dependent on covariates and we also
# make C dependent on A,
# such that drop out is effected by treatment
C = abs(sum_W + 10 * A)
T = abs(sum_W)
S = Surv(time = pmin(T, C), event = (C >= T & T <= 1), type = "right")
# because T is not dependent on A, the true coefficient for A is
truth = exp(0)
# they run a Cox Proportional Hazards regression
# with treatment as the only covariate
coxfit = coxph(S ~ ., data = data.frame(A))
# did they cover the truth in their misspecified model?
lower <- summary(coxfit)$conf.int[, 3]
upper <- summary(coxfit)$conf.int[, 4]
CI_count <- CI_count +  as.numeric(truth >= lower && truth <= upper)
}
# calculating the coverage
return(CI_count/ 1000)
}
CI_count <- 0
CI_coverage_bonus(1000, 1)
CI_coverage_bonus(1000, 7)
CI_coverage_bonus <- function(N, num_W) {
for(i in 1:N){
# simulation
W = list()
for(j in 1:num_W) {
W[[j]] = rnorm(1000)
}
sum_W = 0
for(j in 1:num_W) {
sum_W = sum_W + W[[j]]
}
A = rbinom(1000, 1, 0.5)
A[A == 0] <- -1
# we make C and T dependent on covariates and we also
# make C dependent on A,
# such that drop out is effected by treatment
C = abs(sum_W + 10 * A)
T = abs(W[[1]])
S = Surv(time = pmin(T, C), event = (C >= T & T <= 1), type = "right")
# because T is not dependent on A, the true coefficient for A is
truth = exp(0)
# they run a Cox Proportional Hazards regression
# with treatment as the only covariate
coxfit = coxph(S ~ ., data = data.frame(A))
# did they cover the truth in their misspecified model?
lower <- summary(coxfit)$conf.int[, 3]
upper <- summary(coxfit)$conf.int[, 4]
CI_count <- CI_count +  as.numeric(truth >= lower && truth <= upper)
}
# calculating the coverage
return(CI_count/ 1000)
}
CI_count <- 0
CI_coverage_bonus(1000, 7)
W = list()
for(j in 1:num_W) {
W[[j]] = rnorm(1000)
}
sum_W = 0
for(j in 1:num_W) {
sum_W = sum_W + W[[j]]
}
A = rbinom(1000, 1, 0.5)
A[A == 0] <- -1
C = abs(sum_W + 10 * A)
T = abs(W[[1]])
T
sum_W
CI_coverage_bonus <- function(N, num_W) {
for(i in 1:N){
# simulation
W = list()
for(j in 1:num_W) {
W[[j]] = rnorm(1000)
}
sum_W = 0
for(j in 1:num_W) {
sum_W = sum_W + W[[j]]
}
A = rbinom(1000, 1, 0.5)
A[A == 0] <- -1
# we make C and T dependent on covariates and we also
# make C dependent on A,
# such that drop out is effected by treatment
C = abs(sum_W + 10 * A)
T = abs(sum_W)
S = Surv(time = pmin(T, C), event = (C >= T & T <= 2), type = "right")
# because T is not dependent on A, the true coefficient for A is
truth = exp(0)
# they run a Cox Proportional Hazards regression
# with treatment as the only covariate
coxfit = coxph(S ~ ., data = data.frame(A))
# did they cover the truth in their misspecified model?
lower <- summary(coxfit)$conf.int[, 3]
upper <- summary(coxfit)$conf.int[, 4]
CI_count <- CI_count +  as.numeric(truth >= lower && truth <= upper)
}
# calculating the coverage
return(CI_count/ 1000)
}
CI_count <- 0
CI_coverage_bonus(1000, 7)
n <- 1000
conf_interval_count <- c()
i <- 1
while (i < n) {
# simulate the 'truth' to show this person they are wrong
W1 = rnorm(n)
W2 = rnorm(n)
A <- rbinom(n, 1, 0.5)
# draw T and C--both generated with random uniforms as
# perviously described but C could be generated anyway
# independent of T given W for identifiability purposes.
# We're going to make C and T highly dependent on W1, W2, W3,
# W4, and W5, for model misspecfication later.
C = abs(W1 + W2 - 10 * A) T = abs(W1)
# C = rweibull(n,2,(-A*abs(W1 + W2) + 120)) T =
# rexp(n,((1/90)))
Ttilde <- pmin(T, C)
# Note, I changed the Delta here, otherwise everyone would be # 'alive' so to speak.
Delta <- C >= T & T <= 1
# Create the survival objec
S = Surv(time = Ttilde, event = Delta, type = "right") truth <- 1
# This is how we are going to prove this person they are
# wrong. They only know of the treatment, A, which is from a # randomized trial. The survival object remains the same.
# This individual refeused to include any covariates. incomplete_data = data.frame(A = A)
coxfit = coxph(S ~ A, data = incomplete_data)
conf_interval <- as.data.frame(summary(coxfit)[8]) upper <- conf_interval$conf.int.upper..95[1]
lower <- conf_interval$conf.int.lower..95[1]
conf_interval_count <- c(conf_interval_count, as.numeric(truth >= lower & truth <= upper))
i <- i + 1 }
while (i < n) {
# simulate the 'truth' to show this person they are wrong
W1 = rnorm(n)
W2 = rnorm(n)
A <- rbinom(n, 1, 0.5)
# draw T and C--both generated with random uniforms as
# perviously described but C could be generated anyway
# independent of T given W for identifiability purposes.
# We're going to make C and T highly dependent on W1, W2, W3,
# W4, and W5, for model misspecfication later.
C = abs(W1 + W2 - 10 * A)
T = abs(W1)
# C = rweibull(n,2,(-A*abs(W1 + W2) + 120)) T =
# rexp(n,((1/90)))
Ttilde <- pmin(T, C)
# Note, I changed the Delta here, otherwise everyone would be # 'alive' so to speak.
Delta <- C >= T & T <= 1
# Create the survival objec
S = Surv(time = Ttilde, event = Delta, type = "right")
truth <- 1
# This is how we are going to prove this person they are
# wrong. They only know of the treatment, A, which is from a # randomized trial. The survival object remains the same.
# This individual refeused to include any covariates. incomplete_data = data.frame(A = A)
coxfit = coxph(S ~ A, data = incomplete_data)
conf_interval <- as.data.frame(summary(coxfit)[8])
upper <- conf_interval$conf.int.upper..95[1]
lower <- conf_interval$conf.int.lower..95[1]
conf_interval_count <- c(conf_interval_count, as.numeric(truth >= lower & truth <= upper))
i <- i + 1
}
while (i < n) {
# simulate the 'truth' to show this person they are wrong
W1 = rnorm(n)
W2 = rnorm(n)
A <- rbinom(n, 1, 0.5)
# draw T and C--both generated with random uniforms as
# perviously described but C could be generated anyway
# independent of T given W for identifiability purposes.
# We're going to make C and T highly dependent on W1, W2, W3,
# W4, and W5, for model misspecfication later.
C = abs(W1 + W2 - 10 * A)
T = abs(W1)
# C = rweibull(n,2,(-A*abs(W1 + W2) + 120)) T =
# rexp(n,((1/90)))
Ttilde <- pmin(T, C)
# Note, I changed the Delta here, otherwise everyone would be # 'alive' so to speak.
Delta <- C >= T & T <= 1
# Create the survival objec
S = Surv(time = Ttilde, event = Delta, type = "right")
truth <- 1
# This is how we are going to prove this person they are
# wrong. They only know of the treatment, A, which is from a # randomized trial. The survival object remains the same.
# This individual refeused to include any covariates.
incomplete_data = data.frame(A = A)
coxfit = coxph(S ~ A, data = incomplete_data)
conf_interval <- as.data.frame(summary(coxfit)[8])
upper <- conf_interval$conf.int.upper..95[1]
lower <- conf_interval$conf.int.lower..95[1]
conf_interval_count <- c(conf_interval_count, as.numeric(truth >= lower & truth <= upper))
i <- i + 1
}
print(paste("Coverage is: ", (sum(conf_interval_count)/n)))
n <- 1000
conf_interval_count <- c()
i <- 1
W1 = rnorm(n)
W2 = rnorm(n)
A <- rbinom(n, 1, 0.5)
rm(list=ls())
n <- 1000
conf_interval_count <- c()
i <- 1
W1 = rnorm(n)
W2 = rnorm(n)
A <- rbinom(n, 1, 0.5)
# draw T and C--both generated with random uniforms as
# W4, and W5, for model misspecfication later.
C = abs(W1 + W2 - 10 * A)
T = abs(W1)
Ttilde <- pmin(T, C)
Delta <- C >= T & T <= 1
S = Surv(time = Ttilde, event = Delta, type = "right")
truth <- 1
incomplete_data = data.frame(A = A)
coxfit = coxph(S ~ A, data = incomplete_data)
summary(coxfit)
W = list()
for(j in 1:num_W) {
W[[j]] = rnorm(1000)
}
sum_W = 0
for(j in 1:num_W) {
sum_W = sum_W + W[[j]]
}
rm(list=ls())
N <- 1000
num_W = 5
W = list()
for(j in 1:num_W) {
W[[j]] = rnorm(1000)
}
sum_W = 0
for(j in 1:num_W) {
sum_W = sum_W + W[[j]]
}
A = rbinom(1000, 1, 0.5)
# such that drop out is effected by treatment
C = abs(sum_W - A)
T = abs(sum_W/2)
pmin(T, C)
S = Surv(time = pmin(T, C), event = (C >= T & T <= 2), type = "right")
# because T is not dependent on A, the true coefficient for A is
truth = exp(0)
# they run a Cox Proportional Hazards regression
# with treatment as the only covariate
coxfit = coxph(S ~ ., data = data.frame(A))
summary(coxfit)$conf.int[, 3]
summary(coxfit)$conf.int[, 4]
W1 = rnorm(1000)
W2 = rnorm(1000)
A = rbinom(1000, 1, 0.5)
# we make C and T dependent on covariates and we also
# make C dependent on A,
# such that drop out is effected by treatment
C = abs(W1 + W2 - 10 * A)
T = abs(W1)
S = Surv(time = pmin(T, C), event = (C >= T & T <= 2), type = "right")
# because T is not dependent on A, the true coefficient for A is
truth = exp(0)
coxfit = coxph(S ~ ., data = data.frame(A))
summary(coxfit)$conf.int[, 3]
summary(coxfit)$conf.int[, 4]
(floor(num_W)/2 + 1)
floor(num_W)/2
floor(num_W/2)
N <- 1000
num_W = 2
rm(list=ls())
N <- 1000
num_W = 2
W = list()
for(j in 1:num_W) {
W[[j]] = rnorm(1000)
}
sum_W = 0
sum_W_half = 0
for(j in 1:num_W) {
sum_W = sum_W + W[[j]]
if (j < floor(num_W/2) + 1) {
sum_W_half = sum_W_half + W[[j]]
}
}
C = abs(sum_W - 10 * A)
T = abs(sum_W_half)
S = Surv(time = pmin(T, C), event = (C >= T & T <= 2), type = "right")
# because T is not dependent on A, the true coefficient for A is
truth = exp(0)
# they run a Cox Proportional Hazards regression
# with treatment as the only covariate
coxfit = coxph(S ~ ., data = data.frame(A))
A = rbinom(1000, 1, 0.5)
C = abs(sum_W - 10 * A)
T = abs(sum_W_half)
S = Surv(time = pmin(T, C), event = (C >= T & T <= 2), type = "right")
# because T is not dependent on A, the true coefficient for A is
truth = exp(0)
# they run a Cox Proportional Hazards regression
# with treatment as the only covariate
coxfit = coxph(S ~ ., data = data.frame(A))
summary(coxfit)$conf.int[, 3]
summary(coxfit)$conf.int[, 4]
CI_coverage_bonus <- function(N, num_W) {
for(i in 1:N){
# simulation
W = list()
for(j in 1:num_W) {
W[[j]] = rnorm(1000)
}
sum_W = 0
sum_W_half = 0
for(j in 1:num_W) {
sum_W = sum_W + W[[j]]
if (j < floor(num_W/2) + 1) {
sum_W_half = sum_W_half + W[[j]]
}
}
W1 = rnorm(1000)
W2 = rnorm(1000)
A = rbinom(1000, 1, 0.5)
# we make C and T dependent on covariates and we also
# make C dependent on A,
# such that drop out is effected by treatment
C = abs(sum_W - 10 * A)
T = abs(sum_W_half)
S = Surv(time = pmin(T, C), event = (C >= T & T <= 2), type = "right")
# because T is not dependent on A, the true coefficient for A is
truth = exp(0)
# they run a Cox Proportional Hazards regression
# with treatment as the only covariate
coxfit = coxph(S ~ ., data = data.frame(A))
# did they cover the truth in their misspecified model?
lower <- summary(coxfit)$conf.int[, 3]
upper <- summary(coxfit)$conf.int[, 4]
CI_count <- CI_count +  as.numeric(truth >= lower && truth <= upper)
}
# calculating the coverage
return(CI_count/ 1000)
}
CI_count <- 0
CI_coverage_bonus(1000, 7)
cat("The average coverage rate of 1000 95% CI for A with 1 confounders is",
100 * CI_coverage_bonus(1000, 1), "%.")
cat("The average coverage rate of 1000 95% CI for A with 1 confounders is",
100 * CI_coverage_bonus(1000, 2), "%.")
